export declare const builtins: () => {
    'Array.from': boolean;
    'Array.of': boolean;
    'Array.prototype.copyWithin': boolean;
    'Array.prototype.entries': boolean;
    'Array.prototype.fill': boolean;
    'Array.prototype.find': boolean;
    'Array.prototype.findIndex': boolean;
    'Array.prototype.keys': boolean;
    ArrayBuffer: boolean;
    atob: boolean;
    btoa: boolean;
    DataView: boolean;
    Float32Array: boolean;
    Float64Array: boolean;
    Int8Array: boolean;
    Int16Array: boolean;
    Int32Array: boolean;
    Map: boolean;
    'Math.acosh': boolean;
    'Math.asinh': boolean;
    'Math.cosh': boolean;
    'Math.cbrt': boolean;
    'Math.clz32': boolean;
    'Math.expm1': boolean;
    'Math.fround': boolean;
    'Math.hypot': boolean;
    'Math.imul': boolean;
    'Math.log1p': boolean;
    'Math.log2': boolean;
    'Math.log10': boolean;
    'Math.sign': boolean;
    'Math.sinh': boolean;
    'Math.tanh': boolean;
    'Math.trunc': boolean;
    'new.target': boolean;
    'Number.EPSILON': boolean;
    'Number.isFinite': boolean;
    'Number.isInteger': boolean;
    'Number.isNaN': boolean;
    'Number.isSafeInteger': boolean;
    'Number.MAX_SAFE_INTEGER': boolean;
    'Number.MIN_SAFE_INTEGER': boolean;
    'Number.parseInt': boolean;
    'Number.parseFloat': boolean;
    'Object.assign': boolean;
    'Object.getOwnPropertySymbols': boolean;
    'Object.is': boolean;
    'Object.prototype.__proto__': boolean;
    'Object.setPrototypeOf': boolean;
    Promise: boolean;
    Proxy: boolean;
    Reflect: boolean;
    'RegExp.prototype.sticky': boolean;
    Set: boolean;
    'String.fromCodePoint': boolean;
    'String.prototype.codePointAt': boolean;
    'String.prototype.endsWith': boolean;
    'String.prototype.includes': boolean;
    'String.prototype.normalize': boolean;
    'String.prototype.repeat': boolean;
    'String.prototype.startsWith': boolean;
    'String.raw': boolean;
    Symbol: boolean;
    Uint8Array: boolean;
    Uint8ClampedArray: boolean;
    Uint16Array: boolean;
    Uint32Array: boolean;
    WeakMap: boolean;
    WeakSet: boolean;
};
export declare const syntax: () => {
    arrowFunction: boolean;
    binaryLiterals: boolean;
    blockLevelFunctionDeclaration: boolean;
    _class: boolean;
    computedProperty: boolean;
    constLet: boolean;
    defaultParameters: boolean;
    destructuring: boolean;
    forOf: boolean;
    generatorFunction: boolean;
    octalLiterals: boolean;
    restParameters: boolean;
    shorthandMethod: boolean;
    shorthandProperty: boolean;
    spreadArray: boolean;
    spreadFunctionCall: boolean;
    templateStrings: boolean;
};
declare const _default: () => {
    arrowFunction: boolean;
    binaryLiterals: boolean;
    blockLevelFunctionDeclaration: boolean;
    _class: boolean;
    computedProperty: boolean;
    constLet: boolean;
    defaultParameters: boolean;
    destructuring: boolean;
    forOf: boolean;
    generatorFunction: boolean;
    octalLiterals: boolean;
    restParameters: boolean;
    shorthandMethod: boolean;
    shorthandProperty: boolean;
    spreadArray: boolean;
    spreadFunctionCall: boolean;
    templateStrings: boolean;
    'Array.from': boolean;
    'Array.of': boolean;
    'Array.prototype.copyWithin': boolean;
    'Array.prototype.entries': boolean;
    'Array.prototype.fill': boolean;
    'Array.prototype.find': boolean;
    'Array.prototype.findIndex': boolean;
    'Array.prototype.keys': boolean;
    ArrayBuffer: boolean;
    atob: boolean;
    btoa: boolean;
    DataView: boolean;
    Float32Array: boolean;
    Float64Array: boolean;
    Int8Array: boolean;
    Int16Array: boolean;
    Int32Array: boolean;
    Map: boolean;
    'Math.acosh': boolean;
    'Math.asinh': boolean;
    'Math.cosh': boolean;
    'Math.cbrt': boolean;
    'Math.clz32': boolean;
    'Math.expm1': boolean;
    'Math.fround': boolean;
    'Math.hypot': boolean;
    'Math.imul': boolean;
    'Math.log1p': boolean;
    'Math.log2': boolean;
    'Math.log10': boolean;
    'Math.sign': boolean;
    'Math.sinh': boolean;
    'Math.tanh': boolean;
    'Math.trunc': boolean;
    'new.target': boolean;
    'Number.EPSILON': boolean;
    'Number.isFinite': boolean;
    'Number.isInteger': boolean;
    'Number.isNaN': boolean;
    'Number.isSafeInteger': boolean;
    'Number.MAX_SAFE_INTEGER': boolean;
    'Number.MIN_SAFE_INTEGER': boolean;
    'Number.parseInt': boolean;
    'Number.parseFloat': boolean;
    'Object.assign': boolean;
    'Object.getOwnPropertySymbols': boolean;
    'Object.is': boolean;
    'Object.prototype.__proto__': boolean;
    'Object.setPrototypeOf': boolean;
    Promise: boolean;
    Proxy: boolean;
    Reflect: boolean;
    'RegExp.prototype.sticky': boolean;
    Set: boolean;
    'String.fromCodePoint': boolean;
    'String.prototype.codePointAt': boolean;
    'String.prototype.endsWith': boolean;
    'String.prototype.includes': boolean;
    'String.prototype.normalize': boolean;
    'String.prototype.repeat': boolean;
    'String.prototype.startsWith': boolean;
    'String.raw': boolean;
    Symbol: boolean;
    Uint8Array: boolean;
    Uint8ClampedArray: boolean;
    Uint16Array: boolean;
    Uint32Array: boolean;
    WeakMap: boolean;
    WeakSet: boolean;
};
export default _default;
